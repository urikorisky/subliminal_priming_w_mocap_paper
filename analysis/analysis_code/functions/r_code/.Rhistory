source("C:/Uri/Work/TAU-HUJI/Khen_Paper/Git/subliminal_priming_w_motion_capture/analysis/analysis_code/r_code/exe_analysis.R")
pwd
pwd()
getwd
getwd()
setwd('C:\Uri\Work\TAU-HUJI\Khen_Paper\Git\subliminal_priming_w_motion_capture\analysis\analysis_code\r_code');
setwd('C:/Uri/Work/TAU-HUJI/Khen_Paper/Git/subliminal_priming_w_motion_capture/analysis/analysis_code/r_code')
source("C:/Uri/Work/TAU-HUJI/Khen_Paper/Git/subliminal_priming_w_motion_capture/analysis/analysis_code/r_code/exe_analysis.R")
p
source("C:/Uri/Work/TAU-HUJI/Khen_Paper/Git/subliminal_priming_w_motion_capture/analysis/analysis_code/r_code/main.R")
debugSource('test_assump_coefs.R')
# Paths.
p <- list()
p$EXP_FOLDER <- getwd()
p$PROC_DATA_FOLDER <- paste0(p$EXP_FOLDER, "/../../processed_data/") # Processed data.
# trajectory length.
traj_len = read.mat(paste0(p$PROC_DATA_FOLDER,'/trim_len.mat'))
traj_len <- traj_len$trim_len
# To be defined BY USER!
p$DAY <- 'day2'
p$SUBS <- p$EXP_4_1_SUBS # to analyze.
p$PICKED_TRAJS <- c(1) # traj to analyze (1=to_target, 2=from_target, 3=to_prime, 4=from_prime).
p$NORM_FRAMES <- 200 # Length of normalized trajs.
p$STNDRD <- 0 # Standardize variables before modeling. Relevant when comparing coef between vars.
p$RAND_EFF <- "intrcpt+slope" # "intrcpt+slope" / "intrcpt".
# Add "r_ra" to p$VAR_NAMES (but not p$R_VAR_NAMES, since ra is relevant only for avgs analysis) to analyze reach area.
p$R_VAR_NAMES <- c("react","mt","tot_dist","mad", "com", "auc")
p$K_VAR_NAMES <- c("rt")
p$VAR_NAMES <- c(paste0("r_",p$R_VAR_NAMES), "r_ra", paste0("k_",p$K_VAR_NAMES)) # Used to save files. r/k=reach/keyboard. default: "r_react","r_mt",""r_mad",r_tot_dist","r_auc","r_com",,"k_rt"
p$SUBS_STRING <- paste(p$SUBS, collapse="_") # Concatenate sub's numbers with '_' between them.
p$MAX_SUB <- max(p$SUBS)
traj_names <- read.csv(paste0(p$PROC_DATA_FOLDER, '/traj_names.csv'), header=F)
traj_names <- traj_names[p$PICKED_TRAJS,]
# Check which experiment.
if (setequal(p$SUBS, p$EXP_1_SUBS)){
p$EXP = "exp1"
} else if (setequal(p$SUBS, p$EXP_2_SUBS)){
p$EXP = "exp2"
} else if (setequal(p$SUBS, p$EXP_3_SUBS)){
p$EXP = "exp3"
} else if (setequal(p$SUBS, p$EXP_4_1_SUBS)){
p$EXP = "exp4_1"
} else {
stop("Please analyze each exp seperatly.")
}
p$GOOD_SUBS <- unlist(read.mat(paste0(p$PROC_DATA_FOLDER,'/format_to_r__good_subs.mat')))
effect_size_avgs(p)
var_name <- p$VAR_NAMES[0]
var_name <- p$VAR_NAMES[1]
temp_df <- data.frame(readRDS(paste0(p$PROC_DATA_FOLDER,'/',var_name,'_df.RDS')))
View(temp_df)
new_var_name <- sub('[r,k]_','',var_name)
p$STNDRD
cat(paste('\n\n------',new_var_name,'------\n'))
cohens_d(get(new_var_name)~cond, data=temp_df, paired=TRUE, ci=NULL)
print(cohens_d(get(new_var_name)~cond, data=temp_df, ci=NULL))
print(rank_biserial(get(new_var_name)~cond, data=temp_df, paired=TRUE))
cohens_d(get(new_var_name)~cond, data=temp_df, paired=TRUE, ci=NULL)
get(new_var_name)~cond
get(new_var_name)
cohen.d(get(new_var_name)~cond, data=temp_df, paired=TRUE, ci=NULL)
install.packages("effsize")
cohen.d(get(new_var_name)~cond, data=temp_df, paired=TRUE, ci=NULL)
library(effsize)
cohen.d(get(new_var_name)~cond, data=temp_df, paired=TRUE, ci=NULL)
cohen.d(get(new_var_name)~cond | sub, data=temp_df, paired=TRUE, ci=NULL)
cohen.d(react~cond | sub, data=temp_df, paired=TRUE, ci=NULL)
cohen.d.default
open cohen.d
open 'cohen.d'
cohen.d(get(new_var_name)~cond | Subject(sub), data=temp_df, paired=TRUE, ci=NULL)
cohens_d(get(new_var_name)~cond| Subject(sub), data=temp_df, paired=TRUE, ci=NULL)
cohens_d(get(new_var_name)~cond, data=temp_df, paired=FALSE, ci=NULL)
effect_size_avgs(p)
source("C:/Uri/Work/TAU-HUJI/Khen_Paper/Git/subliminal_priming_w_motion_capture/analysis/analysis_code/r_code/effect_size_avgs.R")
effect_size_avgs(p)
